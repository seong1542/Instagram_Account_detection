# -*- coding: utf-8 -*-
"""인스타그램_영향주는_속성찾기.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fIeSogu4hf_p4nuewekHnr1bxJYL_5Ix
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from google.colab import drive
drive.mount('/content/gdrive', force_remount=True)

filepath='/content/gdrive/My Drive/'
train = pd.read_csv(filepath+'instagram_detection.csv')
print(train.shape)

y_train = train['#fake']
X_train = train.drop('#fake',axis=1)

# 어떤 속성이 가장 영향을 줄까? -> 속성을 하나씩 지워서 돌려보기
#1. 프로필 사진 유무 지우기
A_train = train.drop('#fake',axis=1)
A_train = A_train.drop('#profile_pic',axis=1)

A_train,A_valid, y_train, y_valid = train_test_split(A_train,y_train, test_size=0.2, random_state=0, shuffle=True)

print('X_train = ', A_train.shape)
print('X_valid = ', A_valid.shape)
print('y_train = ', y_train.shape)
print('y_valid = ', y_valid.shape)

from sklearn.ensemble import RandomForestClassifier
rf= RandomForestClassifier()
rf.fit(A_train, y_train)
train_score = rf.score(A_train, y_train)
valid_score = rf.score(A_valid, y_valid)
print('RandomForest Train_Accuracy : {}'.format(train_score))
print('RandomForest Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 1.000000))
print('{:.6f}'.format(valid_score - 0.971301))
print()

import lightgbm as lgb   
lgb_model = lgb.LGBMClassifier()
lgb_model.fit(A_train, y_train)
train_score =lgb_model.score(A_train,y_train)
valid_score= lgb_model.score(A_valid,y_valid)
print('LGBM Train_Accuracy : {}'.format(train_score))
print('LGBM Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.997896))
print('{:.6f}'.format(valid_score - 0.972290))
print()

from sklearn.ensemble import GradientBoostingClassifier
gb= GradientBoostingClassifier()
gb.fit(A_train, y_train)
train_score = gb.score(A_train, y_train)
valid_score = gb.score(A_valid, y_valid)
print('GradientBoosting Train_Accuracy : {}'.format(train_score))
print('GradientBoosting Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.977731))
print('{:.6f}'.format(valid_score - 0.970311))
print()

#2. id 길이 지우기
train = pd.read_csv(filepath+'instagram_detection.csv')
y_train = train['#fake']
A_train = train.drop('#fake',axis=1)
A_train = A_train.drop('#id_len',axis=1)

A_train,A_valid, y_train, y_valid = train_test_split(A_train,y_train, test_size=0.2, random_state=0, shuffle=True)

print('X_train = ', A_train.shape)
print('X_valid = ', A_valid.shape)
print('y_train = ', y_train.shape)
print('y_valid = ', y_valid.shape)

from sklearn.ensemble import RandomForestClassifier
rf= RandomForestClassifier()
rf.fit(A_train, y_train)
train_score = rf.score(A_train, y_train)
valid_score = rf.score(A_valid, y_valid)
print('RandomForest Train_Accuracy : {}'.format(train_score))
print('RandomForest Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 1.000000))
print('{:.6f}'.format(valid_score - 0.971301))
print()

import lightgbm as lgb   
lgb_model = lgb.LGBMClassifier()
lgb_model.fit(A_train, y_train)
train_score =lgb_model.score(A_train,y_train)
valid_score= lgb_model.score(A_valid,y_valid)
print('LGBM Train_Accuracy : {}'.format(train_score))
print('LGBM Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.997896))
print('{:.6f}'.format(valid_score - 0.972290))
print()

from sklearn.ensemble import GradientBoostingClassifier
gb= GradientBoostingClassifier()
gb.fit(A_train, y_train)
train_score = gb.score(A_train, y_train)
valid_score = gb.score(A_valid, y_valid)
print('GradientBoosting Train_Accuracy : {}'.format(train_score))
print('GradientBoosting Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.977731))
print('{:.6f}'.format(valid_score - 0.970311))
print()

#3. id 속의 숫자
train = pd.read_csv(filepath+'instagram_detection.csv')
y_train = train['#fake']
A_train = train.drop('#fake',axis=1)
A_train = A_train.drop('#num_in_id',axis=1)

A_train,A_valid, y_train, y_valid = train_test_split(A_train,y_train, test_size=0.2, random_state=0, shuffle=True)

print('X_train = ', A_train.shape)
print('X_valid = ', A_valid.shape)
print('y_train = ', y_train.shape)
print('y_valid = ', y_valid.shape)

from sklearn.ensemble import RandomForestClassifier
rf= RandomForestClassifier()
rf.fit(A_train, y_train)
train_score = rf.score(A_train, y_train)
valid_score = rf.score(A_valid, y_valid)
print('RandomForest Train_Accuracy : {}'.format(train_score))
print('RandomForest Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 1.000000))
print('{:.6f}'.format(valid_score - 0.971301))
print()

import lightgbm as lgb   
lgb_model = lgb.LGBMClassifier()
lgb_model.fit(A_train, y_train)
train_score =lgb_model.score(A_train,y_train)
valid_score= lgb_model.score(A_valid,y_valid)
print('LGBM Train_Accuracy : {}'.format(train_score))
print('LGBM Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.997896))
print('{:.6f}'.format(valid_score - 0.972290))
print()

from sklearn.ensemble import GradientBoostingClassifier
gb= GradientBoostingClassifier()
gb.fit(A_train, y_train)
train_score = gb.score(A_train, y_train)
valid_score = gb.score(A_valid, y_valid)
print('GradientBoosting Train_Accuracy : {}'.format(train_score))
print('GradientBoosting Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.977731))
print('{:.6f}'.format(valid_score - 0.970311))
print()

#4.name 길이
train = pd.read_csv(filepath+'instagram_detection.csv')
y_train = train['#fake']
A_train = train.drop('#fake',axis=1)
A_train = A_train.drop('#name_len',axis=1)

A_train,A_valid, y_train, y_valid = train_test_split(A_train,y_train, test_size=0.2, random_state=0, shuffle=True)

print('X_train = ', A_train.shape)
print('X_valid = ', A_valid.shape)
print('y_train = ', y_train.shape)
print('y_valid = ', y_valid.shape)

from sklearn.ensemble import RandomForestClassifier
rf= RandomForestClassifier()
rf.fit(A_train, y_train)
train_score = rf.score(A_train, y_train)
valid_score = rf.score(A_valid, y_valid)
print('RandomForest Train_Accuracy : {}'.format(train_score))
print('RandomForest Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 1.000000))
print('{:.6f}'.format(valid_score - 0.971301))
print()

import lightgbm as lgb   
lgb_model = lgb.LGBMClassifier()
lgb_model.fit(A_train, y_train)
train_score =lgb_model.score(A_train,y_train)
valid_score= lgb_model.score(A_valid,y_valid)
print('LGBM Train_Accuracy : {}'.format(train_score))
print('LGBM Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.997896))
print('{:.6f}'.format(valid_score - 0.972290))
print()

from sklearn.ensemble import GradientBoostingClassifier
gb= GradientBoostingClassifier()
gb.fit(A_train, y_train)
train_score = gb.score(A_train, y_train)
valid_score = gb.score(A_valid, y_valid)
print('GradientBoosting Train_Accuracy : {}'.format(train_score))
print('GradientBoosting Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.977731))
print('{:.6f}'.format(valid_score - 0.970311))
print()

#4. name 속의 숫자
train = pd.read_csv(filepath+'instagram_detection.csv')
y_train = train['#fake']
A_train = train.drop('#fake',axis=1)
A_train = A_train.drop('#num_in_name',axis=1)

A_train,A_valid, y_train, y_valid = train_test_split(A_train,y_train, test_size=0.2, random_state=0, shuffle=True)

print('X_train = ', A_train.shape)
print('X_valid = ', A_valid.shape)
print('y_train = ', y_train.shape)
print('y_valid = ', y_valid.shape)

from sklearn.ensemble import RandomForestClassifier
rf= RandomForestClassifier()
rf.fit(A_train, y_train)
train_score = rf.score(A_train, y_train)
valid_score = rf.score(A_valid, y_valid)
print('RandomForest Train_Accuracy : {}'.format(train_score))
print('RandomForest Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 1.000000))
print('{:.6f}'.format(valid_score - 0.971301))
print()

import lightgbm as lgb   
lgb_model = lgb.LGBMClassifier()
lgb_model.fit(A_train, y_train)
train_score =lgb_model.score(A_train,y_train)
valid_score= lgb_model.score(A_valid,y_valid)
print('LGBM Train_Accuracy : {}'.format(train_score))
print('LGBM Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.997896))
print('{:.6f}'.format(valid_score - 0.972290))
print()

from sklearn.ensemble import GradientBoostingClassifier
gb= GradientBoostingClassifier()
gb.fit(A_train, y_train)
train_score = gb.score(A_train, y_train)
valid_score = gb.score(A_valid, y_valid)
print('GradientBoosting Train_Accuracy : {}'.format(train_score))
print('GradientBoosting Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.977731))
print('{:.6f}'.format(valid_score - 0.970311))
print()

#5. name == id
train = pd.read_csv(filepath+'instagram_detection.csv')
y_train = train['#fake']
A_train = train.drop('#fake',axis=1)
A_train = A_train.drop('#name==id',axis=1)

A_train,A_valid, y_train, y_valid = train_test_split(A_train,y_train, test_size=0.2, random_state=0, shuffle=True)

print('X_train = ', A_train.shape)
print('X_valid = ', A_valid.shape)
print('y_train = ', y_train.shape)
print('y_valid = ', y_valid.shape)

from sklearn.ensemble import RandomForestClassifier
rf= RandomForestClassifier()
rf.fit(A_train, y_train)
train_score = rf.score(A_train, y_train)
valid_score = rf.score(A_valid, y_valid)
print('RandomForest Train_Accuracy : {}'.format(train_score))
print('RandomForest Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 1.000000))
print('{:.6f}'.format(valid_score - 0.971301))
print()

import lightgbm as lgb   
lgb_model = lgb.LGBMClassifier()
lgb_model.fit(A_train, y_train)
train_score =lgb_model.score(A_train,y_train)
valid_score= lgb_model.score(A_valid,y_valid)
print('LGBM Train_Accuracy : {}'.format(train_score))
print('LGBM Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.997896))
print('{:.6f}'.format(valid_score - 0.972290))
print()

from sklearn.ensemble import GradientBoostingClassifier
gb= GradientBoostingClassifier()
gb.fit(A_train, y_train)
train_score = gb.score(A_train, y_train)
valid_score = gb.score(A_valid, y_valid)
print('GradientBoosting Train_Accuracy : {}'.format(train_score))
print('GradientBoosting Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.977731))
print('{:.6f}'.format(valid_score - 0.970311))
print()

#6. itro_len
train = pd.read_csv(filepath+'instagram_detection.csv')
y_train = train['#fake']
A_train = train.drop('#fake',axis=1)
A_train = A_train.drop('#itro_len',axis=1)

A_train,A_valid, y_train, y_valid = train_test_split(A_train,y_train, test_size=0.2, random_state=0, shuffle=True)

print('X_train = ', A_train.shape)
print('X_valid = ', A_valid.shape)
print('y_train = ', y_train.shape)
print('y_valid = ', y_valid.shape)

from sklearn.ensemble import RandomForestClassifier
rf= RandomForestClassifier()
rf.fit(A_train, y_train)
train_score = rf.score(A_train, y_train)
valid_score = rf.score(A_valid, y_valid)
print('RandomForest Train_Accuracy : {}'.format(train_score))
print('RandomForest Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 1.000000))
print('{:.6f}'.format(valid_score - 0.971301))
print()

import lightgbm as lgb   
lgb_model = lgb.LGBMClassifier()
lgb_model.fit(A_train, y_train)
train_score =lgb_model.score(A_train,y_train)
valid_score= lgb_model.score(A_valid,y_valid)
print('LGBM Train_Accuracy : {}'.format(train_score))
print('LGBM Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.997896))
print('{:.6f}'.format(valid_score - 0.972290))
print()

from sklearn.ensemble import GradientBoostingClassifier
gb= GradientBoostingClassifier()
gb.fit(A_train, y_train)
train_score = gb.score(A_train, y_train)
valid_score = gb.score(A_valid, y_valid)
print('GradientBoosting Train_Accuracy : {}'.format(train_score))
print('GradientBoosting Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.977731))
print('{:.6f}'.format(valid_score - 0.970311))
print()

#7. url
train = pd.read_csv(filepath+'instagram_detection.csv')
y_train = train['#fake']
A_train = train.drop('#fake',axis=1)
A_train = A_train.drop('#url',axis=1)

A_train,A_valid, y_train, y_valid = train_test_split(A_train,y_train, test_size=0.2, random_state=0, shuffle=True)

print('X_train = ', A_train.shape)
print('X_valid = ', A_valid.shape)
print('y_train = ', y_train.shape)
print('y_valid = ', y_valid.shape)

from sklearn.ensemble import RandomForestClassifier
rf= RandomForestClassifier()
rf.fit(A_train, y_train)
train_score = rf.score(A_train, y_train)
valid_score = rf.score(A_valid, y_valid)
print('RandomForest Train_Accuracy : {}'.format(train_score))
print('RandomForest Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 1.000000))
print('{:.6f}'.format(valid_score - 0.971301))
print()

import lightgbm as lgb   
lgb_model = lgb.LGBMClassifier()
lgb_model.fit(A_train, y_train)
train_score =lgb_model.score(A_train,y_train)
valid_score= lgb_model.score(A_valid,y_valid)
print('LGBM Train_Accuracy : {}'.format(train_score))
print('LGBM Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.997896))
print('{:.6f}'.format(valid_score - 0.972290))
print()

from sklearn.ensemble import GradientBoostingClassifier
gb= GradientBoostingClassifier()
gb.fit(A_train, y_train)
train_score = gb.score(A_train, y_train)
valid_score = gb.score(A_valid, y_valid)
print('GradientBoosting Train_Accuracy : {}'.format(train_score))
print('GradientBoosting Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.977731))
print('{:.6f}'.format(valid_score - 0.970311))
print()

#8. private
train = pd.read_csv(filepath+'instagram_detection.csv')
y_train = train['#fake']
A_train = train.drop('#fake',axis=1)
A_train = A_train.drop('#private',axis=1)

A_train,A_valid, y_train, y_valid = train_test_split(A_train,y_train, test_size=0.2, random_state=0, shuffle=True)

print('X_train = ', A_train.shape)
print('X_valid = ', A_valid.shape)
print('y_train = ', y_train.shape)
print('y_valid = ', y_valid.shape)

from sklearn.ensemble import RandomForestClassifier
rf= RandomForestClassifier()
rf.fit(A_train, y_train)
train_score = rf.score(A_train, y_train)
valid_score = rf.score(A_valid, y_valid)
print('RandomForest Train_Accuracy : {}'.format(train_score))
print('RandomForest Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 1.000000))
print('{:.6f}'.format(valid_score - 0.971301))
print()

import lightgbm as lgb   
lgb_model = lgb.LGBMClassifier()
lgb_model.fit(A_train, y_train)
train_score =lgb_model.score(A_train,y_train)
valid_score= lgb_model.score(A_valid,y_valid)
print('LGBM Train_Accuracy : {}'.format(train_score))
print('LGBM Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.997896))
print('{:.6f}'.format(valid_score - 0.972290))
print()

from sklearn.ensemble import GradientBoostingClassifier
gb= GradientBoostingClassifier()
gb.fit(A_train, y_train)
train_score = gb.score(A_train, y_train)
valid_score = gb.score(A_valid, y_valid)
print('GradientBoosting Train_Accuracy : {}'.format(train_score))
print('GradientBoosting Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.977731))
print('{:.6f}'.format(valid_score - 0.970311))
print()

#9. post
train = pd.read_csv(filepath+'instagram_detection.csv')
y_train = train['#fake']
A_train = train.drop('#fake',axis=1)
A_train = A_train.drop('#post',axis=1)

A_train,A_valid, y_train, y_valid = train_test_split(A_train,y_train, test_size=0.2, random_state=0, shuffle=True)

print('X_train = ', A_train.shape)
print('X_valid = ', A_valid.shape)
print('y_train = ', y_train.shape)
print('y_valid = ', y_valid.shape)

from sklearn.ensemble import RandomForestClassifier
rf= RandomForestClassifier()
rf.fit(A_train, y_train)
train_score = rf.score(A_train, y_train)
valid_score = rf.score(A_valid, y_valid)
print('RandomForest Train_Accuracy : {}'.format(train_score))
print('RandomForest Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 1.000000))
print('{:.6f}'.format(valid_score - 0.971301))
print()

import lightgbm as lgb   
lgb_model = lgb.LGBMClassifier()
lgb_model.fit(A_train, y_train)
train_score =lgb_model.score(A_train,y_train)
valid_score= lgb_model.score(A_valid,y_valid)
print('LGBM Train_Accuracy : {}'.format(train_score))
print('LGBM Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.997896))
print('{:.6f}'.format(valid_score - 0.972290))
print()

from sklearn.ensemble import GradientBoostingClassifier
gb= GradientBoostingClassifier()
gb.fit(A_train, y_train)
train_score = gb.score(A_train, y_train)
valid_score = gb.score(A_valid, y_valid)
print('GradientBoosting Train_Accuracy : {}'.format(train_score))
print('GradientBoosting Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.977731))
print('{:.6f}'.format(valid_score - 0.970311))
print()

#10. follower_counts
train = pd.read_csv(filepath+'instagram_detection.csv')
y_train = train['#fake']
A_train = train.drop('#fake',axis=1)
A_train = A_train.drop('#follower_counts',axis=1)

A_train,A_valid, y_train, y_valid = train_test_split(A_train,y_train, test_size=0.2, random_state=0, shuffle=True)

print('X_train = ', A_train.shape)
print('X_valid = ', A_valid.shape)
print('y_train = ', y_train.shape)
print('y_valid = ', y_valid.shape)

from sklearn.ensemble import RandomForestClassifier
rf= RandomForestClassifier()
rf.fit(A_train, y_train)
train_score = rf.score(A_train, y_train)
valid_score = rf.score(A_valid, y_valid)
print('RandomForest Train_Accuracy : {}'.format(train_score))
print('RandomForest Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 1.000000))
print('{:.6f}'.format(valid_score - 0.971301))
print()

import lightgbm as lgb   
lgb_model = lgb.LGBMClassifier()
lgb_model.fit(A_train, y_train)
train_score =lgb_model.score(A_train,y_train)
valid_score= lgb_model.score(A_valid,y_valid)
print('LGBM Train_Accuracy : {}'.format(train_score))
print('LGBM Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.997896))
print('{:.6f}'.format(valid_score - 0.972290))
print()

from sklearn.ensemble import GradientBoostingClassifier
gb= GradientBoostingClassifier()
gb.fit(A_train, y_train)
train_score = gb.score(A_train, y_train)
valid_score = gb.score(A_valid, y_valid)
print('GradientBoosting Train_Accuracy : {}'.format(train_score))
print('GradientBoosting Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.977731))
print('{:.6f}'.format(valid_score - 0.970311))
print()

#11.follows_counts
train = pd.read_csv(filepath+'instagram_detection.csv')
y_train = train['#fake']
A_train = train.drop('#fake',axis=1)
A_train = A_train.drop('#follows_counts',axis=1)

A_train,A_valid, y_train, y_valid = train_test_split(A_train,y_train, test_size=0.2, random_state=0, shuffle=True)

print('X_train = ', A_train.shape)
print('X_valid = ', A_valid.shape)
print('y_train = ', y_train.shape)
print('y_valid = ', y_valid.shape)

from sklearn.ensemble import RandomForestClassifier
rf= RandomForestClassifier()
rf.fit(A_train, y_train)
train_score = rf.score(A_train, y_train)
valid_score = rf.score(A_valid, y_valid)
print('RandomForest Train_Accuracy : {}'.format(train_score))
print('RandomForest Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 1.000000))
print('{:.6f}'.format(valid_score - 0.971301))
print()

import lightgbm as lgb   
lgb_model = lgb.LGBMClassifier()
lgb_model.fit(A_train, y_train)
train_score =lgb_model.score(A_train,y_train)
valid_score= lgb_model.score(A_valid,y_valid)
print('LGBM Train_Accuracy : {}'.format(train_score))
print('LGBM Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.997896))
print('{:.6f}'.format(valid_score - 0.972290))
print()

from sklearn.ensemble import GradientBoostingClassifier
gb= GradientBoostingClassifier()
gb.fit(A_train, y_train)
train_score = gb.score(A_train, y_train)
valid_score = gb.score(A_valid, y_valid)
print('GradientBoosting Train_Accuracy : {}'.format(train_score))
print('GradientBoosting Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.977731))
print('{:.6f}'.format(valid_score - 0.970311))
print()

#12.highlight
train = pd.read_csv(filepath+'instagram_detection.csv')
y_train = train['#fake']
A_train = train.drop('#fake',axis=1)
A_train = A_train.drop('#highlight',axis=1)

A_train,A_valid, y_train, y_valid = train_test_split(A_train,y_train, test_size=0.2, random_state=0, shuffle=True)

print('X_train = ', A_train.shape)
print('X_valid = ', A_valid.shape)
print('y_train = ', y_train.shape)
print('y_valid = ', y_valid.shape)

from sklearn.ensemble import RandomForestClassifier
rf= RandomForestClassifier()
rf.fit(A_train, y_train)
train_score = rf.score(A_train, y_train)
valid_score = rf.score(A_valid, y_valid)
print('RandomForest Train_Accuracy : {}'.format(train_score))
print('RandomForest Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 1.000000))
print('{:.6f}'.format(valid_score - 0.971301))
print()

import lightgbm as lgb   
lgb_model = lgb.LGBMClassifier()
lgb_model.fit(A_train, y_train)
train_score =lgb_model.score(A_train,y_train)
valid_score= lgb_model.score(A_valid,y_valid)
print('LGBM Train_Accuracy : {}'.format(train_score))
print('LGBM Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.997896))
print('{:.6f}'.format(valid_score - 0.972290))
print()

from sklearn.ensemble import GradientBoostingClassifier
gb= GradientBoostingClassifier()
gb.fit(A_train, y_train)
train_score = gb.score(A_train, y_train)
valid_score = gb.score(A_valid, y_valid)
print('GradientBoosting Train_Accuracy : {}'.format(train_score))
print('GradientBoosting Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.977731))
print('{:.6f}'.format(valid_score - 0.970311))
print()

#13.account_tag
train = pd.read_csv(filepath+'instagram_detection.csv')
y_train = train['#fake']
A_train = train.drop('#fake',axis=1)
A_train = A_train.drop('#account_tag',axis=1)

A_train,A_valid, y_train, y_valid = train_test_split(A_train,y_train, test_size=0.2, random_state=0, shuffle=True)

print('X_train = ', A_train.shape)
print('X_valid = ', A_valid.shape)
print('y_train = ', y_train.shape)
print('y_valid = ', y_valid.shape)

from sklearn.ensemble import RandomForestClassifier
rf= RandomForestClassifier()
rf.fit(A_train, y_train)
train_score = rf.score(A_train, y_train)
valid_score = rf.score(A_valid, y_valid)
print('RandomForest Train_Accuracy : {}'.format(train_score))
print('RandomForest Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 1.000000))
print('{:.6f}'.format(valid_score - 0.971301))
print()

import lightgbm as lgb   
lgb_model = lgb.LGBMClassifier()
lgb_model.fit(A_train, y_train)
train_score =lgb_model.score(A_train,y_train)
valid_score= lgb_model.score(A_valid,y_valid)
print('LGBM Train_Accuracy : {}'.format(train_score))
print('LGBM Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.997896))
print('{:.6f}'.format(valid_score - 0.972290))
print()

from sklearn.ensemble import GradientBoostingClassifier
gb= GradientBoostingClassifier()
gb.fit(A_train, y_train)
train_score = gb.score(A_train, y_train)
valid_score = gb.score(A_valid, y_valid)
print('GradientBoosting Train_Accuracy : {}'.format(train_score))
print('GradientBoosting Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.977731))
print('{:.6f}'.format(valid_score - 0.970311))
print()

#14.hash_tag 
train = pd.read_csv(filepath+'instagram_detection.csv')
y_train = train['#fake']
A_train = train.drop('#fake',axis=1)
A_train = A_train.drop('#hash_tag',axis=1)

A_train,A_valid, y_train, y_valid = train_test_split(A_train,y_train, test_size=0.2, random_state=0, shuffle=True)

print('X_train = ', A_train.shape)
print('X_valid = ', A_valid.shape)
print('y_train = ', y_train.shape)
print('y_valid = ', y_valid.shape)

from sklearn.ensemble import RandomForestClassifier
rf= RandomForestClassifier()
rf.fit(A_train, y_train)
train_score = rf.score(A_train, y_train)
valid_score = rf.score(A_valid, y_valid)
print('RandomForest Train_Accuracy : {}'.format(train_score))
print('RandomForest Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 1.000000))
print('{:.6f}'.format(valid_score - 0.971301))
print()

import lightgbm as lgb   
lgb_model = lgb.LGBMClassifier()
lgb_model.fit(A_train, y_train)
train_score =lgb_model.score(A_train,y_train)
valid_score= lgb_model.score(A_valid,y_valid)
print('LGBM Train_Accuracy : {}'.format(train_score))
print('LGBM Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.997896))
print('{:.6f}'.format(valid_score - 0.972290))
print()

from sklearn.ensemble import GradientBoostingClassifier
gb= GradientBoostingClassifier()
gb.fit(A_train, y_train)
train_score = gb.score(A_train, y_train)
valid_score = gb.score(A_valid, y_valid)
print('GradientBoosting Train_Accuracy : {}'.format(train_score))
print('GradientBoosting Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.977731))
print('{:.6f}'.format(valid_score - 0.970311))
print()

#15.professional
train = pd.read_csv(filepath+'instagram_detection.csv')
y_train = train['#fake']
A_train = train.drop('#fake',axis=1)
A_train = A_train.drop('#professional',axis=1)

A_train,A_valid, y_train, y_valid = train_test_split(A_train,y_train, test_size=0.2, random_state=0, shuffle=True)

print('X_train = ', A_train.shape)
print('X_valid = ', A_valid.shape)
print('y_train = ', y_train.shape)
print('y_valid = ', y_valid.shape)

from sklearn.ensemble import RandomForestClassifier
rf= RandomForestClassifier()
rf.fit(A_train, y_train)
train_score = rf.score(A_train, y_train)
valid_score = rf.score(A_valid, y_valid)
print('RandomForest Train_Accuracy : {}'.format(train_score))
print('RandomForest Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 1.000000))
print('{:.6f}'.format(valid_score - 0.971301))
print()

import lightgbm as lgb   
lgb_model = lgb.LGBMClassifier()
lgb_model.fit(A_train, y_train)
train_score =lgb_model.score(A_train,y_train)
valid_score= lgb_model.score(A_valid,y_valid)
print('LGBM Train_Accuracy : {}'.format(train_score))
print('LGBM Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.997896))
print('{:.6f}'.format(valid_score - 0.972290))
print()

from sklearn.ensemble import GradientBoostingClassifier
gb= GradientBoostingClassifier()
gb.fit(A_train, y_train)
train_score = gb.score(A_train, y_train)
valid_score = gb.score(A_valid, y_valid)
print('GradientBoosting Train_Accuracy : {}'.format(train_score))
print('GradientBoosting Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.977731))
print('{:.6f}'.format(valid_score - 0.970311))
print()

train = pd.read_csv(filepath+'instagram_detection.csv')
y_train = train['#fake']
A_train = train.drop('#fake',axis=1)
A_train = A_train.drop('#follower_counts',axis=1)
A_train = A_train.drop('#follows_counts',axis=1)

A_train,A_valid, y_train, y_valid = train_test_split(A_train,y_train, test_size=0.2, random_state=0, shuffle=True)

print('X_train = ', A_train.shape)
print('X_valid = ', A_valid.shape)
print('y_train = ', y_train.shape)
print('y_valid = ', y_valid.shape)

from sklearn.ensemble import RandomForestClassifier
rf= RandomForestClassifier()
rf.fit(A_train, y_train)
train_score = rf.score(A_train, y_train)
valid_score = rf.score(A_valid, y_valid)
print('RandomForest Train_Accuracy : {}'.format(train_score))
print('RandomForest Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 1.000000))
print('{:.6f}'.format(valid_score - 0.971301))
print()

import lightgbm as lgb   
lgb_model = lgb.LGBMClassifier()
lgb_model.fit(A_train, y_train)
train_score =lgb_model.score(A_train,y_train)
valid_score= lgb_model.score(A_valid,y_valid)
print('LGBM Train_Accuracy : {}'.format(train_score))
print('LGBM Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.997896))
print('{:.6f}'.format(valid_score - 0.972290))
print()

from sklearn.ensemble import GradientBoostingClassifier
gb= GradientBoostingClassifier()
gb.fit(A_train, y_train)
train_score = gb.score(A_train, y_train)
valid_score = gb.score(A_valid, y_valid)
print('GradientBoosting Train_Accuracy : {}'.format(train_score))
print('GradientBoosting Valid_Accuracy : {}'.format(valid_score))
print('{:.6f}'.format(train_score - 0.977731))
print('{:.6f}'.format(valid_score - 0.970311))
print()

