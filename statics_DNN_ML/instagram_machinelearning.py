# -*- coding: utf-8 -*-
"""instagram_machineLearning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1It5DXUB-vVKjXhBY1XC1BUoRaFacrKuE
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
from google.colab import drive
drive.mount('/content/gdrive', force_remount=True)
filepath='/content/gdrive/My Drive/'
train = pd.read_csv(filepath+'instagram_train.csv')
print(train.shape)

train.head()

train.info()  #어떤 속성으로 이루어져있는지, 결측치가 있는지

#상관관계 분석
data_corr = train.corr(method='pearson')
axes = sns.heatmap(data_corr, vmin=-1, vmax=1, cmap='BrBG')
axes.set_title('Correlation Heatmap Between Features')

y_train = train['#fake']
X_train = train.drop('#fake',axis=1)

"""## **Train dataset 진짜/가짜 계정의 개수 비교 (각 5000개씩 있음)**"""

account_counts = sns.countplot(y_train)
account_counts.set_title("Count plot for accounts")

# 진짜 계정과 가짜 계정이 총 몇 개씩 있는지 확인 (False = 진짜 계정 , True = 가짜 계정)
unique, freq = np.unique(y_train, return_counts=True)
for i, j in zip(unique, freq):
  print('Label : ',i, ', Frequency : ', j)

# 학습-검증데이터 8:2비율로
from sklearn.model_selection import train_test_split
X_train,X_valid, y_train, y_valid = train_test_split(X_train,y_train, test_size=0.2, random_state=0, shuffle=True) #shuffle사용

print('X_train = ', X_train.shape)
print('X_valid = ', X_valid.shape)
print('y_train = ', y_train.shape)
print('y_valid = ', y_valid.shape)

account_counts = sns.countplot(y_train)
account_counts.set_title("Count plot for accounts in Train")

# 진짜 계정과 가짜 계정이 총 몇 개씩 있는지 확인 (False = 진짜 계정 , True = 가짜 계정)
unique, freq = np.unique(y_train, return_counts=True)
for i, j in zip(unique, freq):
  print('Label : ',i, ', Frequency : ', j)

account_counts = sns.countplot(y_valid)
account_counts.set_title("Count plot for accounts in Valid")

# 진짜 계정과 가짜 계정이 총 몇 개씩 있는지 확인 (False = 진짜 계정 , True = 가짜 계정)
unique, freq = np.unique(y_valid, return_counts=True)
for i, j in zip(unique, freq):
  print('Label : ',i, ', Frequency : ', j)

from sklearn.ensemble import RandomForestClassifier
rf= RandomForestClassifier()
rf.fit(X_train, y_train)
train_score = rf.score(X_train, y_train)
valid_score = rf.score(X_valid, y_valid)
print('RandomForest Train_Accuracy : {}'.format(train_score))
print('RandomForest Valid_Accuracy : {}'.format(valid_score))
print()

from sklearn.ensemble import GradientBoostingClassifier
gb= GradientBoostingClassifier()
gb.fit(X_train, y_train)
train_score = gb.score(X_train, y_train)
valid_score = gb.score(X_valid, y_valid)
print('GradientBoosting Train_Accuracy : {}'.format(train_score))
print('GradientBoosting Valid_Accuracy : {}'.format(valid_score))
print()

import lightgbm as lgb
lgb_model = lgb.LGBMClassifier()
lgb_model.fit(X_train, y_train)
train_score =lgb_model.score(X_train,y_train)
valid_score= lgb_model.score(X_valid,y_valid)
print('LGBM Train_Accuracy : {}'.format(train_score))
print('LGBM Valid_Accuracy : {}'.format(valid_score))
print()

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix
rf= RandomForestClassifier()
rf.fit(X_train, y_train)
pred = rf.predict(X_valid)
cm = confusion_matrix(y_valid,pred)

import seaborn as sns
sns.heatmap(cm, annot=True, annot_kws={'size':20}, cmap="YlOrBr")
plt.xlabel("Predicted", fontsize=20)
plt.ylabel("Actual",fontsize=20)
#실제로는 fake 계정인데, real계정이라고 예상한 경우 34개
#실제로는 real 계정인데, fake계정이라고 예상한 경우 25개

from sklearn.ensemble import GradientBoostingClassifier
gb= GradientBoostingClassifier()
gb.fit(X_train, y_train)
pred = gb.predict(X_valid)
cm = confusion_matrix(y_valid,pred)
sns.heatmap(cm, annot=True, annot_kws={'size':20}, cmap="YlOrBr")
plt.xlabel("Predicted", fontsize=20)
plt.ylabel("Actual",fontsize=20)
#실제로는 fake 계정인데, real계정이라고 예상한 경우 35개
#실제로는 real 계정인데, fake계정이라고 예상한 경우 32개

import lightgbm as lgb
lgb_model = lgb.LGBMClassifier()
lgb_model.fit(X_train, y_train)
pred = lgb_model.predict(X_valid)
cm = confusion_matrix(y_valid,pred)
sns.heatmap(cm, annot=True, annot_kws={'size':20}, cmap="YlOrBr")
plt.xlabel("Predicted", fontsize=20)
plt.ylabel("Actual",fontsize=20)
#실제로는 fake 계정인데, real계정이라고 예상한 경우 29개
#실제로는 real 계정인데, fake계정이라고 예상한 경우 24개

"""# 최대한 효율적인 방법 - RandomForest, LGBM, Gradient Boosting

## **TEST해보자**
"""

test = pd.read_csv(filepath+'instagram_test.csv')
print(test.shape)
y_test = test['#fake']
X_test = test.drop('#fake', axis=1)

"""##Test용으로 100개의 계정 데이터를 넣어보자. 100개 중 몇 개를 맞출까?

###0과 1은 50개씩 들어있다.
"""

#test속 0과 1의 비율
account_counts = sns.countplot(y_test)
account_counts.set_title("Count plot for accounts")

#RandomForest 테스트해보기
from sklearn.metrics import accuracy_score
pred = rf.predict(X_test)
print("랜덤포레스트 이용해서 맞은 결과의 개수 : ", accuracy_score(y_test, pred)*100)

#Gradient_boosting 테스트해보기
pred = lgb_model.predict(X_test)
print("LGBM accuracy : ", accuracy_score(y_test, pred)*100)

#Gradient_boosting 테스트해보기
pred = gb.predict(X_test)
print("GB accuracy : ", accuracy_score(y_test, pred)*100)

"""##직접 하나씩 넣어볼까?

### 먼저 가짜계정을 집어 넣어보자. 가짜 계정이라고 뜰까?
"""

#가짜계정을 직접 넣어서 확인해보자
#프로필사진, id길이, id속 숫자, 이름 길이, 이름 속 숫자, 이름==id, 소개글, url, 비공개유무, 게시물, 팔로워, 팔로잉, 하이라이트, 소개글 속 계정개수, 해쉬태그 개수, 프로페셔널계정유무 순으로 입력
p=[[1,19,4,14,0,0,0,0,0,0,3,3,0,0,0,0]]  # 학습하지 않은 가짜 계정의 정보를 입력
rf_y = rf.predict(p)
if rf_y == 0:
  print("랜덤포레스트 예상 : Real Account!")
elif rf_y==1:
  print("랜덤포레스트 예상 : Fake Account...")
lgb_y=lgb_model.predict(p)
if lgb_y == 0:
  print("LightGBM 예상 : Real Account!")
elif lgb_y==1:
  print("LightGBM 예상 : Fake Account...")
gb_y=gb.predict(p)
if gb_y == 0:
  print("Gradient Boosting 예상 : Real Account!")
elif gb_y==1:
  print("Gradient Boosting 예상 : Fake Account...")

"""### 진짜 계정을 넣어보자. 진짜 계정이라고 뜰까?"""

#진짜 계정을 직접 넣어서 돌려보자
#프로필사진, id길이, id속 숫자, 이름 길이, 이름 속 숫자, 이름==id, 소개글, url, 비공개유무, 게시물, 팔로워, 팔로잉, 하이라이트, 소개글 속 계정개수, 해쉬태그 개수, 프로페셔널계정유무 순으로 입력
x=[[0,9,0,3,0,0,0,0,1,4,265,350,0,0,0,0]]  # 학습하지 않은 진짜 계정의 정보를 입력

rf_y = rf.predict(x)
if rf_y == 0:
  print("랜덤포레스트 예상 : Real Account!")
elif rf_y==1:
  print("랜덤포레스트 예상 : Fake Account...")
lgb_y=lgb_model.predict(x)
if lgb_y == 0:
  print("LightGBM 예상 : Real Account!")
elif lgb_y==1:
  print("LightGBM 예상 : Fake Account...")
gb_y=gb.predict(x)
if gb_y == 0:
  print("Gradient Boosting 예상 : Real Account!")
elif gb_y==1:
  print("Gradient Boosting 예상 : Fake Account...")